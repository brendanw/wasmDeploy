{"version":3,"file":"94.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAgB,OAAID,IAEpBD,EAAa,OAAIC,GAClB,CATD,CASGK,YAAY,I,MCTfC,cAAc,cACdC,QAAQC,IAAI,4BACZ,IAAIC,EAAK,KAeT,SAASC,IACN,MAAMC,EAAOC,KAAKD,KAElB,OAAQA,GAAQA,EAAKE,QAClB,IAAK,OACF,IAAKF,EAAU,IACZ,MAAM,IAAIG,MAAM,8BAGnB,OAAOC,YAAY,CAChBC,GAAIL,EAAKK,GACTC,QAAS,CAACC,OAAQT,EAAGU,KAAK,CAACC,IAAKT,EAAKS,IAAKC,KAAMV,EAAKW,OAAQC,YAAa,kBAEhF,IAAK,oBACF,OAAOR,YAAY,CAChBC,GAAIL,EAAKK,GACTC,QAASR,EAAGU,KAAK,wBAEvB,IAAK,kBACF,OAAOJ,YAAY,CAChBC,GAAIL,EAAKK,GACTC,QAASR,EAAGU,KAAK,sBAEvB,IAAK,uBACF,OAAOJ,YAAY,CAChBC,GAAIL,EAAKK,GACTC,QAASR,EAAGU,KAAK,2BAEvB,IAAK,kBACF,OAcTK,iBACG,IACOf,IACDA,EAAGgB,QACHhB,EAAK,MAGR,MAAMiB,QAAWC,UAAUC,QAAQC,qBACdH,EAAGI,cAAc,cAAe,CAACC,QAAQ,UAGxDL,EAAGM,YAAY,eACrBzB,QAAQC,IAAI,iCAEf,CAAE,MAAOyB,GACN1B,QAAQ2B,MAAM,+BAAgCD,EACjD,CACH,CA/BgBE,CAAexB,EAAKK,IAC9B,QAEG,MADAT,QAAQC,IAAI,uBAAuBG,GAAQA,EAAKE,UAC1C,IAAIC,MAAM,uBAAuBH,GAAQA,EAAKE,UAE7D,CAEA,SAASuB,EAAYH,GAClB,OAAOlB,YAAY,CAChBC,GAAIJ,KAAKD,KAAKK,GACdkB,MAAOD,GAEb,CAqBA,GAA6B,mBAAlB3B,cAA8B,CACtCC,QAAQC,IAAI,uDACZC,EAAK,KACL,MAAM4B,EA9ETb,iBACGjB,QAAQC,IAAI,mCACZ,MAAM8B,QAAgBC,oBAGtB9B,EAAK,IAAI6B,EAAQE,IAAIC,GAAG,4BAA6B,KACrDlC,QAAQC,IAAI,iCAKf,CAmE0BkC,GACvBC,KAAKC,UAAaC,GACRR,EAAeS,KAAKpC,EAAcW,KAAKwB,IAC1CE,MAAMX,EAAYf,KAAKwB,GAEjC,C","sources":["webpack://common/webpack/universalModuleDefinition","webpack://common/./kotlin/sqlitewasm.worker.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"common\"] = factory();\n\telse\n\t\troot[\"common\"] = factory();\n})(globalThis, () => {\nreturn ","importScripts(\"sqlite3.js\");\nconsole.log(\"local sqlitewasm worker!\");\nlet db = null;\n\nasync function createDatabase() {\n   console.log(\"attempting to create sqlite3 db\")\n   const sqlite3 = await sqlite3InitModule();\n\n   // TODO: Parameterize storage location, and storage type\n   db = new sqlite3.oo1.DB(\"file:database.db?vfs=opfs\", \"c\");\n   console.log(\"database created successfully.\");\n\n   // Uncomment out the below to delete the db\n   /*await deleteDatabase();\n   console.log(\"database deleted\");*/\n}\n\nfunction handleMessage() {\n   const data = this.data;\n\n   switch (data && data.action) {\n      case \"exec\":\n         if (!data[\"sql\"]) {\n            throw new Error(\"exec: Missing query string\");\n         }\n\n         return postMessage({\n            id: data.id,\n            results: {values: db.exec({sql: data.sql, bind: data.params, returnValue: \"resultRows\"})},\n         })\n      case \"begin_transaction\":\n         return postMessage({\n            id: data.id,\n            results: db.exec(\"BEGIN TRANSACTION;\"),\n         })\n      case \"end_transaction\":\n         return postMessage({\n            id: data.id,\n            results: db.exec(\"END TRANSACTION;\"),\n         })\n      case \"rollback_transaction\":\n         return postMessage({\n            id: data.id,\n            results: db.exec(\"ROLLBACK TRANSACTION;\"),\n         })\n      case \"delete_database\":\n         return deleteDatabase(data.id);\n      default:\n         console.log(`Unsupported action: ${data && data.action}`)\n         throw new Error(`Unsupported action: ${data && data.action}`);\n   }\n}\n\nfunction handleError(err) {\n   return postMessage({\n      id: this.data.id,\n      error: err,\n   });\n}\n\nasync function deleteDatabase() {\n   try {\n      if (db) {\n         db.close(); // Close the database connection\n         db = null;\n      }\n      // Check if the database is stored in OPFS\n      const fs = await navigator.storage.getDirectory();\n      const dbFile = await fs.getFileHandle(\"database.db\", {create: false});\n\n      // Delete the file\n      await fs.removeEntry(\"database.db\");\n      console.log(\"Database deleted successfully.\");\n\n   } catch (err) {\n      console.error(\"Error deleting the database:\", err);\n   }\n}\n\nif (typeof importScripts === \"function\") {\n   console.log('this sqlitewasm.worker..js script is being imported');\n   db = null;\n   const sqlModuleReady = createDatabase();\n   self.onmessage = (event) => {\n      return sqlModuleReady.then(handleMessage.bind(event))\n         .catch(handleError.bind(event));\n   }\n}"],"names":["root","factory","exports","module","define","amd","globalThis","importScripts","console","log","db","handleMessage","data","this","action","Error","postMessage","id","results","values","exec","sql","bind","params","returnValue","async","close","fs","navigator","storage","getDirectory","getFileHandle","create","removeEntry","err","error","deleteDatabase","handleError","sqlModuleReady","sqlite3","sqlite3InitModule","oo1","DB","createDatabase","self","onmessage","event","then","catch"],"sourceRoot":""}